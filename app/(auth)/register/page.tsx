"use client";

import { useState, useEffect } from "react";
import Image from "next/image";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { User, Lock, Check, Mail, IdCard, Phone, Eye, EyeOff } from "lucide-react";
import Link from "next/link";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";
import 'sweetalert2/dist/sweetalert2.min.css';

type FormState = {
  username: string;
  password: string;
  confirm: string;
  email: string;
  fullName: string;
  phone: string;
};

export default function Register() {
  const MySwal = withReactContent(Swal);
  const [showPwd, setShowPwd] = useState(false);
  const [showPwd2, setShowPwd2] = useState(false);

  // ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  const [file, setFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<string | null>(null);

  // ‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [form, setForm] = useState<FormState>({
    username: "",
    password: "",
    confirm: "",
    email: "",
    fullName: "",
    phone: "",
  });

  // preview ‡∏£‡∏π‡∏õ
  useEffect(() => {
    if (!file) { setPreview(null); return; }
    const url = URL.createObjectURL(file);
    setPreview(url);
    return () => URL.revokeObjectURL(url);
  }, [file]);

  // handler ‡∏£‡∏ß‡∏°
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };


  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á validate ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (!form.username || !form.password || !form.email) {
      MySwal.fire({
        icon: "error",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!",
        text: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
      })
      return;
    }
    if (form.password !== form.confirm) {
      MySwal.fire({
        icon: "warning",
        title: "‡∏£‡∏´‡∏±‡∏ú‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
      })
      return;
    }

    const fd = new FormData();
    // ‡πÅ‡∏ô‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    Object.entries(form).forEach(([k, v]) => fd.append(k, v));
    if (file) fd.append("file", file);

    const res = await fetch("/api/register", { method: "POST", body: fd });
    const data = await res.json().catch(() => ({} as any));

    if (!res.ok) {
      alert(`‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data?.error ?? res.statusText}`);
      return;
    }
    alert("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ");
    // ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô redirect
  };

  return (
    <div className="register section">
      <form onSubmit={handleSubmit}>
        <Link href="/">
          <Button className="m-5 cursor-pointer p-6 bg-[#344CB7] text-white transition-all duration-150 hover:bg-[#000957] hover:text-white">
            ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
          </Button>
        </Link>

        {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
        <div className="register form flex justify-center my-10">
          <label className="rounded-[100%] cursor-pointer" htmlFor="uploadImage">
            <div className="relative w-[250px] h-[250px] rounded-full overflow-hidden">
              <Image
                src={preview ?? "/images/arrow.png"}
                alt="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå"
                fill
                sizes="250px"
                className="object-cover"
              />
            </div>
          </label>
          <Input
            className="hidden"
            id="uploadImage"
            type="file"
            accept="image/*"
            onChange={(e) => setFile(e.target.files?.[0] ?? null)}
          />
        </div>

        {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <div className="form-group my-10 w-full max-w-md mx-auto px-4 flex flex-col items-stretch justify-center">
          {/* Username */}
          <div className="relative w-full">
            <User className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
            <Input
              name="username"
              value={form.username}
              onChange={handleChange}
              className="w-full my-2 h-11 pl-9 pr-4 focus-visible:ring-2 focus-visible:ring-[#344CB7] focus:border-[#344CB7]"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
            />
          </div>

          {/* Password */}
          <div className="relative w-full">
            <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
            <Input
              name="password"
              value={form.password}
              onChange={handleChange}
              className="w-full my-2 h-11 pl-9 pr-10 focus-visible:ring-2 focus-visible:ring-[#344CB7] focus:border-[#344CB7]"
              type={showPwd ? "text" : "password"}
              placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              autoComplete="new-password"
            />
            <button
              type="button"
              onClick={() => setShowPwd(v => !v)}
              aria-label={showPwd ? "‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" : "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"}
              className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground"
            >
              {showPwd ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
            </button>
          </div>

          {/* Confirm Password */}
          <div className="relative w-full">
            <Check className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
            <Input
              name="confirm"
              value={form.confirm}
              onChange={handleChange}
              className="w-full my-2 h-11 pl-9 pr-10 focus-visible:ring-2 focus-visible:ring-[#344CB7] focus:border-[#344CB7]"
              type={showPwd2 ? "text" : "password"}
              placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              autoComplete="new-password"
            />
            <button
              type="button"
              onClick={() => setShowPwd2(v => !v)}
              aria-label={showPwd2 ? "‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" : "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"}
              className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground"
            >
              {showPwd2 ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
            </button>
          </div>

          {/* Email */}
          <div className="relative w-full">
            <Mail className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
            <Input
              name="email"
              value={form.email}
              onChange={handleChange}
              className="w-full my-2 h-11 pl-9 pr-4 focus-visible:ring-2 focus-visible:ring-[#344CB7] focus:border-[#344CB7]"
              placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
              type="email"
              autoComplete="email"
            />
          </div>

          {/* Full name */}
          <div className="relative w-full">
            <IdCard className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
            <Input
              name="fullName"
              value={form.fullName}
              onChange={handleChange}
              className="w-full my-2 h-11 pl-9 pr-4 focus-visible:ring-2 focus-visible:ring-[#344CB7] focus:border-[#344CB7]"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
            />
          </div>

          {/* Phone */}
          <div className="relative w-full">
            <Phone className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
            <Input
              name="phone"
              value={form.phone}
              onChange={handleChange}
              className="w-full my-2 h-11 pl-9 pr-4 focus-visible:ring-2 focus-visible:ring-[#344CB7] focus:border-[#344CB7]"
              placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
              inputMode="tel"
            />
          </div>

          <Button type="submit" className="mt-5 w-full p-6 bg-[#344CB7] text-white transition-all duration-150 hover:bg-[#000957] hover:text-white">
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
          </Button>
          <Link className="mt-2 text-center" href="/login">
            ‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß <u>‡∏Ñ‡∏•‡∏¥‡∏Å!</u>
          </Link>
        </div>
      </form>
    </div>
  );
}
